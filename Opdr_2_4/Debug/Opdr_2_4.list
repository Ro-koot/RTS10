
Opdr_2_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d68  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000f00  08000f00  00010f00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f10  08000f10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08000f10  08000f10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f18  08000f18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000f2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000f2c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fbf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000109f  00000000  00000000  00023ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  000250a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a8  00000000  00000000  00025400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001433d  00000000  00000000  000258a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ec5  00000000  00000000  00039be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007efac  00000000  00000000  0003eaaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bda56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000754  00000000  00000000  000bdaa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000109f  00000000  00000000  000be1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000ee8 	.word	0x08000ee8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000ee8 	.word	0x08000ee8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b500      	push	{lr}
 80004de:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e0:	222c      	movs	r2, #44	; 0x2c
 80004e2:	2100      	movs	r1, #0
 80004e4:	a809      	add	r0, sp, #36	; 0x24
 80004e6:	f000 fcf7 	bl	8000ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	2214      	movs	r2, #20
 80004ec:	2100      	movs	r1, #0
 80004ee:	a803      	add	r0, sp, #12
 80004f0:	f000 fcf2 	bl	8000ed8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f4:	2300      	movs	r3, #0
 80004f6:	4a19      	ldr	r2, [pc, #100]	; (800055c <SystemClock_Config+0x80>)
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80004fc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000500:	6411      	str	r1, [r2, #64]	; 0x40
 8000502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000504:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000508:	9201      	str	r2, [sp, #4]
 800050a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <SystemClock_Config+0x84>)
 800050e:	9302      	str	r3, [sp, #8]
 8000510:	6811      	ldr	r1, [r2, #0]
 8000512:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000516:	6011      	str	r1, [r2, #0]
 8000518:	6812      	ldr	r2, [r2, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051a:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000520:	9202      	str	r2, [sp, #8]
 8000522:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000524:	2202      	movs	r2, #2
 8000526:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000528:	2001      	movs	r0, #1
 800052a:	2210      	movs	r2, #16
 800052c:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	a808      	add	r0, sp, #32
 8000532:	f000 fa33 	bl	800099c <HAL_RCC_OscConfig>
 8000536:	4601      	mov	r1, r0
 8000538:	b108      	cbz	r0, 800053e <SystemClock_Config+0x62>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000540:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000544:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000548:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054a:	a803      	add	r0, sp, #12
 800054c:	f000 fc04 	bl	8000d58 <HAL_RCC_ClockConfig>
 8000550:	b108      	cbz	r0, 8000556 <SystemClock_Config+0x7a>
 8000552:	b672      	cpsid	i
  while (1)
 8000554:	e7fe      	b.n	8000554 <SystemClock_Config+0x78>
}
 8000556:	b015      	add	sp, #84	; 0x54
 8000558:	f85d fb04 	ldr.w	pc, [sp], #4
 800055c:	40023800 	.word	0x40023800
 8000560:	40007000 	.word	0x40007000

08000564 <main>:
{
 8000564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8000566:	f000 f8bf 	bl	80006e8 <HAL_Init>
  SystemClock_Config();
 800056a:	f7ff ffb7 	bl	80004dc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	2214      	movs	r2, #20
 8000570:	2100      	movs	r1, #0
 8000572:	a801      	add	r0, sp, #4
 8000574:	f000 fcb0 	bl	8000ed8 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000578:	2400      	movs	r4, #0
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <main+0x7c>)
 800057c:	9400      	str	r4, [sp, #0]
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8000580:	4818      	ldr	r0, [pc, #96]	; (80005e4 <main+0x80>)
	  for (volatile int32_t i = 0; i < 1000000; i++);
 8000582:	4e19      	ldr	r6, [pc, #100]	; (80005e8 <main+0x84>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000584:	f042 0208 	orr.w	r2, r2, #8
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8000590:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8000594:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059a:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 800059c:	f000 f9f0 	bl	8000980 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <main+0x80>)
 80005a6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005b0:	f000 f91e 	bl	80007f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin | Red_LED_Pin, GPIO_PIN_SET);
 80005b4:	462a      	mov	r2, r5
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x80>)
	  HAL_GPIO_TogglePin(GPIOD, Green_LED_Pin | Red_LED_Pin | Orange_LED_Pin | Blue_LED_Pin);
 80005b8:	4d0a      	ldr	r5, [pc, #40]	; (80005e4 <main+0x80>)
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin | Red_LED_Pin, GPIO_PIN_SET);
 80005ba:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80005be:	f000 f9df 	bl	8000980 <HAL_GPIO_WritePin>
	  for (volatile int32_t i = 0; i < 1000000; i++);
 80005c2:	9401      	str	r4, [sp, #4]
 80005c4:	9b01      	ldr	r3, [sp, #4]
 80005c6:	42b3      	cmp	r3, r6
 80005c8:	dd05      	ble.n	80005d6 <main+0x72>
	  HAL_GPIO_TogglePin(GPIOD, Green_LED_Pin | Red_LED_Pin | Orange_LED_Pin | Blue_LED_Pin);
 80005ca:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80005ce:	4628      	mov	r0, r5
 80005d0:	f000 f9db 	bl	800098a <HAL_GPIO_TogglePin>
	  for (volatile int32_t i = 0; i < 1000000; i++);
 80005d4:	e7f5      	b.n	80005c2 <main+0x5e>
 80005d6:	9b01      	ldr	r3, [sp, #4]
 80005d8:	3301      	adds	r3, #1
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	e7f2      	b.n	80005c4 <main+0x60>
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020c00 	.word	0x40020c00
 80005e8:	000f423f 	.word	0x000f423f

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x34>)
 80005f0:	2100      	movs	r1, #0
 80005f2:	9100      	str	r1, [sp, #0]
 80005f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005fa:	645a      	str	r2, [r3, #68]	; 0x44
 80005fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005fe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	9101      	str	r1, [sp, #4]
 8000608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800060a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800060e:	641a      	str	r2, [r3, #64]	; 0x40
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	b002      	add	sp, #8
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800

08000624 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler>

08000626 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler>

08000628 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler>

0800062a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <BusFault_Handler>

0800062c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler>

0800062e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062e:	4770      	bx	lr

08000630 <DebugMon_Handler>:
 8000630:	4770      	bx	lr

08000632 <PendSV_Handler>:
 8000632:	4770      	bx	lr

08000634 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 b872 	b.w	800071c <HAL_IncTick>

08000638 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000638:	4a03      	ldr	r2, [pc, #12]	; (8000648 <SystemInit+0x10>)
 800063a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800063e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000642:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800064c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000684 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000652:	490e      	ldr	r1, [pc, #56]	; (800068c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000668:	4c0b      	ldr	r4, [pc, #44]	; (8000698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000676:	f7ff ffdf 	bl	8000638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067a:	f000 fc09 	bl	8000e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800067e:	f7ff ff71 	bl	8000564 <main>
  bx  lr    
 8000682:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000690:	08000f20 	.word	0x08000f20
  ldr r2, =_sbss
 8000694:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000698:	2000002c 	.word	0x2000002c

0800069c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC_IRQHandler>
	...

080006a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_InitTick+0x3c>)
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_InitTick+0x40>)
{
 80006a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a8:	7818      	ldrb	r0, [r3, #0]
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80006b2:	6810      	ldr	r0, [r2, #0]
 80006b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80006b8:	f000 f886 	bl	80007c8 <HAL_SYSTICK_Config>
 80006bc:	4604      	mov	r4, r0
 80006be:	b958      	cbnz	r0, 80006d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c0:	2d0f      	cmp	r5, #15
 80006c2:	d809      	bhi.n	80006d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	4602      	mov	r2, r0
 80006c6:	4629      	mov	r1, r5
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 f84a 	bl	8000764 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_InitTick+0x44>)
 80006d2:	4620      	mov	r0, r4
 80006d4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
 80006da:	e7fc      	b.n	80006d6 <HAL_InitTick+0x36>
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000004 	.word	0x20000004
 80006e4:	20000008 	.word	0x20000008

080006e8 <HAL_Init>:
{
 80006e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <HAL_Init+0x30>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000702:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 f81b 	bl	8000740 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800070a:	200f      	movs	r0, #15
 800070c:	f7ff ffc8 	bl	80006a0 <HAL_InitTick>
  HAL_MspInit();
 8000710:	f7ff ff6c 	bl	80005ec <HAL_MspInit>
}
 8000714:	2000      	movs	r0, #0
 8000716:	bd08      	pop	{r3, pc}
 8000718:	40023c00 	.word	0x40023c00

0800071c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <HAL_IncTick+0x10>)
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <HAL_IncTick+0x14>)
 8000720:	6811      	ldr	r1, [r2, #0]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	440b      	add	r3, r1
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	20000004 	.word	0x20000004

08000734 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000734:	4b01      	ldr	r3, [pc, #4]	; (800073c <HAL_GetTick+0x8>)
 8000736:	6818      	ldr	r0, [r3, #0]
}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000028 	.word	0x20000028

08000740 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	4907      	ldr	r1, [pc, #28]	; (8000760 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000742:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000744:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000748:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800074c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000750:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800075c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	68dc      	ldr	r4, [r3, #12]
 800076a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	2d04      	cmp	r5, #4
 8000776:	bf28      	it	cs
 8000778:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000780:	bf8c      	ite	hi
 8000782:	3c03      	subhi	r4, #3
 8000784:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000786:	fa03 f505 	lsl.w	r5, r3, r5
 800078a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078e:	40a3      	lsls	r3, r4
 8000790:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000796:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	bfac      	ite	ge
 800079e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	4a08      	ldrlt	r2, [pc, #32]	; (80007c4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	bfb8      	it	lt
 80007aa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	bfaa      	itet	ge
 80007b2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007bc:	bd30      	pop	{r4, r5, pc}
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	e000ed14 	.word	0xe000ed14

080007c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	3801      	subs	r0, #1
 80007ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ce:	d20b      	bcs.n	80007e8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	4a05      	ldr	r2, [pc, #20]	; (80007ec <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	21f0      	movs	r1, #240	; 0xf0
 80007da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007de:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007e8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f4:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800097c <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f8:	4a5e      	ldr	r2, [pc, #376]	; (8000974 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007fa:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fc:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80007fe:	2401      	movs	r4, #1
 8000800:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000806:	43ac      	bics	r4, r5
 8000808:	f040 80a5 	bne.w	8000956 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800080c:	684d      	ldr	r5, [r1, #4]
 800080e:	f005 0403 	and.w	r4, r5, #3
 8000812:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000816:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000818:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800081a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800081e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000820:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000824:	d834      	bhi.n	8000890 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000826:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000828:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800082c:	68cf      	ldr	r7, [r1, #12]
 800082e:	fa07 f708 	lsl.w	r7, r7, r8
 8000832:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000836:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000838:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800083a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800083e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000842:	409f      	lsls	r7, r3
 8000844:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000848:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800084a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800084c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000850:	688f      	ldr	r7, [r1, #8]
 8000852:	fa07 f708 	lsl.w	r7, r7, r8
 8000856:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800085a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800085c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800085e:	d119      	bne.n	8000894 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000860:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000864:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000868:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800086c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000870:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000874:	f04f 0e0f 	mov.w	lr, #15
 8000878:	fa0e fe0b 	lsl.w	lr, lr, fp
 800087c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000880:	690f      	ldr	r7, [r1, #16]
 8000882:	fa07 f70b 	lsl.w	r7, r7, fp
 8000886:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800088a:	f8ca 7020 	str.w	r7, [sl, #32]
 800088e:	e001      	b.n	8000894 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000890:	2c03      	cmp	r4, #3
 8000892:	d1da      	bne.n	800084a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000894:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000896:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800089a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800089c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800089e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80008a2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008a4:	d057      	beq.n	8000956 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	f04f 0a00 	mov.w	sl, #0
 80008aa:	f8cd a004 	str.w	sl, [sp, #4]
 80008ae:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b2:	4c31      	ldr	r4, [pc, #196]	; (8000978 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80008b8:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80008bc:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80008c0:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80008c4:	9601      	str	r6, [sp, #4]
 80008c6:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80008c8:	f023 0603 	bic.w	r6, r3, #3
 80008cc:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80008d0:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008d4:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80008d8:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008dc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008e0:	270f      	movs	r7, #15
 80008e2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008e6:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008e8:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ec:	d03a      	beq.n	8000964 <HAL_GPIO_Init+0x174>
 80008ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008f2:	42a0      	cmp	r0, r4
 80008f4:	d038      	beq.n	8000968 <HAL_GPIO_Init+0x178>
 80008f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008fa:	42a0      	cmp	r0, r4
 80008fc:	d036      	beq.n	800096c <HAL_GPIO_Init+0x17c>
 80008fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000902:	42a0      	cmp	r0, r4
 8000904:	d034      	beq.n	8000970 <HAL_GPIO_Init+0x180>
 8000906:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800090a:	42a0      	cmp	r0, r4
 800090c:	bf0c      	ite	eq
 800090e:	2404      	moveq	r4, #4
 8000910:	2407      	movne	r4, #7
 8000912:	fa04 f40e 	lsl.w	r4, r4, lr
 8000916:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000918:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 800091a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800091c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000920:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000922:	bf54      	ite	pl
 8000924:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000926:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800092a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800092c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800092e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000930:	bf54      	ite	pl
 8000932:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000934:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000938:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800093a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800093c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800093e:	bf54      	ite	pl
 8000940:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000942:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000946:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000948:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800094a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800094c:	bf54      	ite	pl
 800094e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000950:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000954:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000956:	3301      	adds	r3, #1
 8000958:	2b10      	cmp	r3, #16
 800095a:	f47f af4f 	bne.w	80007fc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800095e:	b003      	add	sp, #12
 8000960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000964:	4654      	mov	r4, sl
 8000966:	e7d4      	b.n	8000912 <HAL_GPIO_Init+0x122>
 8000968:	2401      	movs	r4, #1
 800096a:	e7d2      	b.n	8000912 <HAL_GPIO_Init+0x122>
 800096c:	2402      	movs	r4, #2
 800096e:	e7d0      	b.n	8000912 <HAL_GPIO_Init+0x122>
 8000970:	2403      	movs	r4, #3
 8000972:	e7ce      	b.n	8000912 <HAL_GPIO_Init+0x122>
 8000974:	40013c00 	.word	0x40013c00
 8000978:	40020000 	.word	0x40020000
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000980:	b10a      	cbz	r2, 8000986 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000982:	6181      	str	r1, [r0, #24]
  }
}
 8000984:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000986:	0409      	lsls	r1, r1, #16
 8000988:	e7fb      	b.n	8000982 <HAL_GPIO_WritePin+0x2>

0800098a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800098a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800098c:	ea01 0203 	and.w	r2, r1, r3
 8000990:	ea21 0103 	bic.w	r1, r1, r3
 8000994:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000998:	6181      	str	r1, [r0, #24]
}
 800099a:	4770      	bx	lr

0800099c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800099c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009a0:	4604      	mov	r4, r0
 80009a2:	b340      	cbz	r0, 80009f6 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009a4:	6803      	ldr	r3, [r0, #0]
 80009a6:	07dd      	lsls	r5, r3, #31
 80009a8:	d410      	bmi.n	80009cc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	0798      	lsls	r0, r3, #30
 80009ae:	d45e      	bmi.n	8000a6e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	071a      	lsls	r2, r3, #28
 80009b4:	f100 80a0 	bmi.w	8000af8 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	075b      	lsls	r3, r3, #29
 80009bc:	f100 80c0 	bmi.w	8000b40 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009c0:	69a0      	ldr	r0, [r4, #24]
 80009c2:	2800      	cmp	r0, #0
 80009c4:	f040 8128 	bne.w	8000c18 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80009c8:	2000      	movs	r0, #0
 80009ca:	e02b      	b.n	8000a24 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009cc:	4b8f      	ldr	r3, [pc, #572]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	f002 020c 	and.w	r2, r2, #12
 80009d4:	2a04      	cmp	r2, #4
 80009d6:	d007      	beq.n	80009e8 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009de:	2a08      	cmp	r2, #8
 80009e0:	d10b      	bne.n	80009fa <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	0251      	lsls	r1, r2, #9
 80009e6:	d508      	bpl.n	80009fa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e8:	4b88      	ldr	r3, [pc, #544]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	039a      	lsls	r2, r3, #14
 80009ee:	d5dc      	bpl.n	80009aa <HAL_RCC_OscConfig+0xe>
 80009f0:	6863      	ldr	r3, [r4, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1d9      	bne.n	80009aa <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80009f6:	2001      	movs	r0, #1
 80009f8:	e014      	b.n	8000a24 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009fa:	6862      	ldr	r2, [r4, #4]
 80009fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000a00:	d113      	bne.n	8000a2a <HAL_RCC_OscConfig+0x8e>
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fe93 	bl	8000734 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a0e:	4e7f      	ldr	r6, [pc, #508]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000a10:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a12:	6833      	ldr	r3, [r6, #0]
 8000a14:	039b      	lsls	r3, r3, #14
 8000a16:	d4c8      	bmi.n	80009aa <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a18:	f7ff fe8c 	bl	8000734 <HAL_GetTick>
 8000a1c:	1b40      	subs	r0, r0, r5
 8000a1e:	2864      	cmp	r0, #100	; 0x64
 8000a20:	d9f7      	bls.n	8000a12 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000a22:	2003      	movs	r0, #3
}
 8000a24:	b002      	add	sp, #8
 8000a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a2a:	4d78      	ldr	r5, [pc, #480]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 8000a2c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000a30:	682b      	ldr	r3, [r5, #0]
 8000a32:	d107      	bne.n	8000a44 <HAL_RCC_OscConfig+0xa8>
 8000a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a38:	602b      	str	r3, [r5, #0]
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a40:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a42:	e7e2      	b.n	8000a0a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a48:	602b      	str	r3, [r5, #0]
 8000a4a:	682b      	ldr	r3, [r5, #0]
 8000a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a50:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d1d9      	bne.n	8000a0a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8000a56:	f7ff fe6d 	bl	8000734 <HAL_GetTick>
 8000a5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	039f      	lsls	r7, r3, #14
 8000a60:	d5a3      	bpl.n	80009aa <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a62:	f7ff fe67 	bl	8000734 <HAL_GetTick>
 8000a66:	1b80      	subs	r0, r0, r6
 8000a68:	2864      	cmp	r0, #100	; 0x64
 8000a6a:	d9f7      	bls.n	8000a5c <HAL_RCC_OscConfig+0xc0>
 8000a6c:	e7d9      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a6e:	4b67      	ldr	r3, [pc, #412]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	f012 0f0c 	tst.w	r2, #12
 8000a76:	d007      	beq.n	8000a88 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a7e:	2a08      	cmp	r2, #8
 8000a80:	d111      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	025e      	lsls	r6, r3, #9
 8000a86:	d40e      	bmi.n	8000aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a88:	4a60      	ldr	r2, [pc, #384]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 8000a8a:	6813      	ldr	r3, [r2, #0]
 8000a8c:	079d      	lsls	r5, r3, #30
 8000a8e:	d502      	bpl.n	8000a96 <HAL_RCC_OscConfig+0xfa>
 8000a90:	68e3      	ldr	r3, [r4, #12]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d1af      	bne.n	80009f6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a96:	6813      	ldr	r3, [r2, #0]
 8000a98:	6921      	ldr	r1, [r4, #16]
 8000a9a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000aa2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aa4:	e784      	b.n	80009b0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000aa6:	68e2      	ldr	r2, [r4, #12]
 8000aa8:	4b59      	ldr	r3, [pc, #356]	; (8000c10 <HAL_RCC_OscConfig+0x274>)
 8000aaa:	b1b2      	cbz	r2, 8000ada <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ab0:	f7ff fe40 	bl	8000734 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab4:	4d55      	ldr	r5, [pc, #340]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000ab6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	0798      	lsls	r0, r3, #30
 8000abc:	d507      	bpl.n	8000ace <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	6922      	ldr	r2, [r4, #16]
 8000ac2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ac6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000aca:	602b      	str	r3, [r5, #0]
 8000acc:	e770      	b.n	80009b0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ace:	f7ff fe31 	bl	8000734 <HAL_GetTick>
 8000ad2:	1b80      	subs	r0, r0, r6
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d9ef      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x11c>
 8000ad8:	e7a3      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000ada:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000adc:	f7ff fe2a 	bl	8000734 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ae0:	4e4a      	ldr	r6, [pc, #296]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000ae2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ae4:	6833      	ldr	r3, [r6, #0]
 8000ae6:	0799      	lsls	r1, r3, #30
 8000ae8:	f57f af62 	bpl.w	80009b0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aec:	f7ff fe22 	bl	8000734 <HAL_GetTick>
 8000af0:	1b40      	subs	r0, r0, r5
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9f6      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x148>
 8000af6:	e794      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000af8:	6962      	ldr	r2, [r4, #20]
 8000afa:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <HAL_RCC_OscConfig+0x274>)
 8000afc:	b182      	cbz	r2, 8000b20 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000afe:	2201      	movs	r2, #1
 8000b00:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000b04:	f7ff fe16 	bl	8000734 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b08:	4e40      	ldr	r6, [pc, #256]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000b0a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b0c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b0e:	079f      	lsls	r7, r3, #30
 8000b10:	f53f af52 	bmi.w	80009b8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b14:	f7ff fe0e 	bl	8000734 <HAL_GetTick>
 8000b18:	1b40      	subs	r0, r0, r5
 8000b1a:	2802      	cmp	r0, #2
 8000b1c:	d9f6      	bls.n	8000b0c <HAL_RCC_OscConfig+0x170>
 8000b1e:	e780      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000b20:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000b24:	f7ff fe06 	bl	8000734 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b28:	4e38      	ldr	r6, [pc, #224]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000b2a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b2c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b2e:	0798      	lsls	r0, r3, #30
 8000b30:	f57f af42 	bpl.w	80009b8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b34:	f7ff fdfe 	bl	8000734 <HAL_GetTick>
 8000b38:	1b40      	subs	r0, r0, r5
 8000b3a:	2802      	cmp	r0, #2
 8000b3c:	d9f6      	bls.n	8000b2c <HAL_RCC_OscConfig+0x190>
 8000b3e:	e770      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 8000b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b44:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000b48:	d128      	bne.n	8000b9c <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	9201      	str	r2, [sp, #4]
 8000b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b52:	641a      	str	r2, [r3, #64]	; 0x40
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b5e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b60:	4d2c      	ldr	r5, [pc, #176]	; (8000c14 <HAL_RCC_OscConfig+0x278>)
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	05d9      	lsls	r1, r3, #23
 8000b66:	d51b      	bpl.n	8000ba0 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b68:	68a3      	ldr	r3, [r4, #8]
 8000b6a:	4d28      	ldr	r5, [pc, #160]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d127      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x224>
 8000b70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b78:	f7ff fddc 	bl	8000734 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b7c:	4e23      	ldr	r6, [pc, #140]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000b7e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b80:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b84:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000b86:	079b      	lsls	r3, r3, #30
 8000b88:	d539      	bpl.n	8000bfe <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000b8a:	2f00      	cmp	r7, #0
 8000b8c:	f43f af18 	beq.w	80009c0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 8000b92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	e711      	b.n	80009c0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e7df      	b.n	8000b60 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ba0:	682b      	ldr	r3, [r5, #0]
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ba8:	f7ff fdc4 	bl	8000734 <HAL_GetTick>
 8000bac:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bae:	682b      	ldr	r3, [r5, #0]
 8000bb0:	05da      	lsls	r2, r3, #23
 8000bb2:	d4d9      	bmi.n	8000b68 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bb4:	f7ff fdbe 	bl	8000734 <HAL_GetTick>
 8000bb8:	1b80      	subs	r0, r0, r6
 8000bba:	2802      	cmp	r0, #2
 8000bbc:	d9f7      	bls.n	8000bae <HAL_RCC_OscConfig+0x212>
 8000bbe:	e730      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	d104      	bne.n	8000bce <HAL_RCC_OscConfig+0x232>
 8000bc4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	672b      	str	r3, [r5, #112]	; 0x70
 8000bcc:	e7d0      	b.n	8000b70 <HAL_RCC_OscConfig+0x1d4>
 8000bce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000bd0:	f022 0201 	bic.w	r2, r2, #1
 8000bd4:	672a      	str	r2, [r5, #112]	; 0x70
 8000bd6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000bd8:	f022 0204 	bic.w	r2, r2, #4
 8000bdc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1ca      	bne.n	8000b78 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8000be2:	f7ff fda7 	bl	8000734 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000bea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bee:	0798      	lsls	r0, r3, #30
 8000bf0:	d5cb      	bpl.n	8000b8a <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf2:	f7ff fd9f 	bl	8000734 <HAL_GetTick>
 8000bf6:	1b80      	subs	r0, r0, r6
 8000bf8:	4540      	cmp	r0, r8
 8000bfa:	d9f7      	bls.n	8000bec <HAL_RCC_OscConfig+0x250>
 8000bfc:	e711      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bfe:	f7ff fd99 	bl	8000734 <HAL_GetTick>
 8000c02:	1b40      	subs	r0, r0, r5
 8000c04:	4540      	cmp	r0, r8
 8000c06:	d9bd      	bls.n	8000b84 <HAL_RCC_OscConfig+0x1e8>
 8000c08:	e70b      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	42470000 	.word	0x42470000
 8000c14:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c18:	4d36      	ldr	r5, [pc, #216]	; (8000cf4 <HAL_RCC_OscConfig+0x358>)
 8000c1a:	68ab      	ldr	r3, [r5, #8]
 8000c1c:	f003 030c 	and.w	r3, r3, #12
 8000c20:	2b08      	cmp	r3, #8
 8000c22:	d03d      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <HAL_RCC_OscConfig+0x35c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000c2a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c2c:	d12b      	bne.n	8000c86 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8000c2e:	f7ff fd81 	bl	8000734 <HAL_GetTick>
 8000c32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	0199      	lsls	r1, r3, #6
 8000c38:	d41f      	bmi.n	8000c7a <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c3a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c42:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c4e:	0852      	lsrs	r2, r2, #1
 8000c50:	3a01      	subs	r2, #1
 8000c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c56:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c5a:	4d26      	ldr	r5, [pc, #152]	; (8000cf4 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000c60:	f7ff fd68 	bl	8000734 <HAL_GetTick>
 8000c64:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c66:	682b      	ldr	r3, [r5, #0]
 8000c68:	019a      	lsls	r2, r3, #6
 8000c6a:	f53f aead 	bmi.w	80009c8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c6e:	f7ff fd61 	bl	8000734 <HAL_GetTick>
 8000c72:	1b00      	subs	r0, r0, r4
 8000c74:	2802      	cmp	r0, #2
 8000c76:	d9f6      	bls.n	8000c66 <HAL_RCC_OscConfig+0x2ca>
 8000c78:	e6d3      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c7a:	f7ff fd5b 	bl	8000734 <HAL_GetTick>
 8000c7e:	1b80      	subs	r0, r0, r6
 8000c80:	2802      	cmp	r0, #2
 8000c82:	d9d7      	bls.n	8000c34 <HAL_RCC_OscConfig+0x298>
 8000c84:	e6cd      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000c86:	f7ff fd55 	bl	8000734 <HAL_GetTick>
 8000c8a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c8c:	682b      	ldr	r3, [r5, #0]
 8000c8e:	019b      	lsls	r3, r3, #6
 8000c90:	f57f ae9a 	bpl.w	80009c8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c94:	f7ff fd4e 	bl	8000734 <HAL_GetTick>
 8000c98:	1b00      	subs	r0, r0, r4
 8000c9a:	2802      	cmp	r0, #2
 8000c9c:	d9f6      	bls.n	8000c8c <HAL_RCC_OscConfig+0x2f0>
 8000c9e:	e6c0      	b.n	8000a22 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ca0:	2801      	cmp	r0, #1
 8000ca2:	f43f aebf 	beq.w	8000a24 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000ca6:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ca8:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000caa:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	f47f aea1 	bne.w	80009f6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cb4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	f47f ae9b 	bne.w	80009f6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000cc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000cc2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000ccc:	f47f ae93 	bne.w	80009f6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000cd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cd2:	0852      	lsrs	r2, r2, #1
 8000cd4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000cd8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000cda:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000cde:	f47f ae8a 	bne.w	80009f6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000ce2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ce4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ce8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000cec:	f43f ae6c 	beq.w	80009c8 <HAL_RCC_OscConfig+0x2c>
 8000cf0:	e681      	b.n	80009f6 <HAL_RCC_OscConfig+0x5a>
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	42470000 	.word	0x42470000

08000cfc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cfc:	4913      	ldr	r1, [pc, #76]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000cfe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d00:	688b      	ldr	r3, [r1, #8]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d01c      	beq.n	8000d44 <HAL_RCC_GetSysClockFreq+0x48>
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d11c      	bne.n	8000d48 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d0e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d10:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d12:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d14:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d18:	bf14      	ite	ne
 8000d1a:	480d      	ldrne	r0, [pc, #52]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d1c:	480d      	ldreq	r0, [pc, #52]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d1e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d22:	bf18      	it	ne
 8000d24:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d2a:	fba1 0100 	umull	r0, r1, r1, r0
 8000d2e:	f7ff fa53 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x50>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000d3e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d42:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x54>)
 8000d46:	e7fc      	b.n	8000d42 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000d4a:	e7fa      	b.n	8000d42 <HAL_RCC_GetSysClockFreq+0x46>
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	017d7840 	.word	0x017d7840
 8000d54:	00f42400 	.word	0x00f42400

08000d58 <HAL_RCC_ClockConfig>:
{
 8000d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d5c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d5e:	4604      	mov	r4, r0
 8000d60:	b910      	cbnz	r0, 8000d68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d62:	2001      	movs	r0, #1
}
 8000d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d68:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <HAL_RCC_ClockConfig+0x124>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f002 0207 	and.w	r2, r2, #7
 8000d70:	428a      	cmp	r2, r1
 8000d72:	d328      	bcc.n	8000dc6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d74:	6822      	ldr	r2, [r4, #0]
 8000d76:	0797      	lsls	r7, r2, #30
 8000d78:	d42d      	bmi.n	8000dd6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d7a:	07d0      	lsls	r0, r2, #31
 8000d7c:	d441      	bmi.n	8000e02 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <HAL_RCC_ClockConfig+0x124>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	f002 0207 	and.w	r2, r2, #7
 8000d86:	42aa      	cmp	r2, r5
 8000d88:	d866      	bhi.n	8000e58 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	0751      	lsls	r1, r2, #29
 8000d8e:	d46c      	bmi.n	8000e6a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d90:	0713      	lsls	r3, r2, #28
 8000d92:	d507      	bpl.n	8000da4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d94:	4a3a      	ldr	r2, [pc, #232]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000d96:	6921      	ldr	r1, [r4, #16]
 8000d98:	6893      	ldr	r3, [r2, #8]
 8000d9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000da2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000da4:	f7ff ffaa 	bl	8000cfc <HAL_RCC_GetSysClockFreq>
 8000da8:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000daa:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000db2:	5cd3      	ldrb	r3, [r2, r3]
 8000db4:	40d8      	lsrs	r0, r3
 8000db6:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <HAL_RCC_ClockConfig+0x130>)
 8000db8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000dba:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <HAL_RCC_ClockConfig+0x134>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	f7ff fc6f 	bl	80006a0 <HAL_InitTick>
  return HAL_OK;
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	e7ce      	b.n	8000d64 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d1c6      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xa>
 8000dd4:	e7ce      	b.n	8000d74 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000dd8:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ddc:	bf1e      	ittt	ne
 8000dde:	6899      	ldrne	r1, [r3, #8]
 8000de0:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000de4:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000de6:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000de8:	bf42      	ittt	mi
 8000dea:	6899      	ldrmi	r1, [r3, #8]
 8000dec:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000df0:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df2:	4923      	ldr	r1, [pc, #140]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000df4:	68a0      	ldr	r0, [r4, #8]
 8000df6:	688b      	ldr	r3, [r1, #8]
 8000df8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dfc:	4303      	orrs	r3, r0
 8000dfe:	608b      	str	r3, [r1, #8]
 8000e00:	e7bb      	b.n	8000d7a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e02:	6862      	ldr	r2, [r4, #4]
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000e06:	2a01      	cmp	r2, #1
 8000e08:	d11c      	bne.n	8000e44 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	d0a7      	beq.n	8000d62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e12:	4e1b      	ldr	r6, [pc, #108]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000e14:	68b3      	ldr	r3, [r6, #8]
 8000e16:	f023 0303 	bic.w	r3, r3, #3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e1e:	f7ff fc89 	bl	8000734 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e22:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e26:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e28:	68b3      	ldr	r3, [r6, #8]
 8000e2a:	6862      	ldr	r2, [r4, #4]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e34:	d0a3      	beq.n	8000d7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e36:	f7ff fc7d 	bl	8000734 <HAL_GetTick>
 8000e3a:	1bc0      	subs	r0, r0, r7
 8000e3c:	4540      	cmp	r0, r8
 8000e3e:	d9f3      	bls.n	8000e28 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000e40:	2003      	movs	r0, #3
 8000e42:	e78f      	b.n	8000d64 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e44:	1e91      	subs	r1, r2, #2
 8000e46:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e48:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e4a:	d802      	bhi.n	8000e52 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e50:	e7de      	b.n	8000e10 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e52:	f013 0f02 	tst.w	r3, #2
 8000e56:	e7db      	b.n	8000e10 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e58:	b2ea      	uxtb	r2, r5
 8000e5a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f47f af7d 	bne.w	8000d62 <HAL_RCC_ClockConfig+0xa>
 8000e68:	e78f      	b.n	8000d8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e6a:	4905      	ldr	r1, [pc, #20]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000e6c:	68e0      	ldr	r0, [r4, #12]
 8000e6e:	688b      	ldr	r3, [r1, #8]
 8000e70:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e74:	4303      	orrs	r3, r0
 8000e76:	608b      	str	r3, [r1, #8]
 8000e78:	e78a      	b.n	8000d90 <HAL_RCC_ClockConfig+0x38>
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00
 8000e80:	40023800 	.word	0x40023800
 8000e84:	08000f00 	.word	0x08000f00
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000008 	.word	0x20000008

08000e90 <__libc_init_array>:
 8000e90:	b570      	push	{r4, r5, r6, lr}
 8000e92:	4d0d      	ldr	r5, [pc, #52]	; (8000ec8 <__libc_init_array+0x38>)
 8000e94:	4c0d      	ldr	r4, [pc, #52]	; (8000ecc <__libc_init_array+0x3c>)
 8000e96:	1b64      	subs	r4, r4, r5
 8000e98:	10a4      	asrs	r4, r4, #2
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	42a6      	cmp	r6, r4
 8000e9e:	d109      	bne.n	8000eb4 <__libc_init_array+0x24>
 8000ea0:	4d0b      	ldr	r5, [pc, #44]	; (8000ed0 <__libc_init_array+0x40>)
 8000ea2:	4c0c      	ldr	r4, [pc, #48]	; (8000ed4 <__libc_init_array+0x44>)
 8000ea4:	f000 f820 	bl	8000ee8 <_init>
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	10a4      	asrs	r4, r4, #2
 8000eac:	2600      	movs	r6, #0
 8000eae:	42a6      	cmp	r6, r4
 8000eb0:	d105      	bne.n	8000ebe <__libc_init_array+0x2e>
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb8:	4798      	blx	r3
 8000eba:	3601      	adds	r6, #1
 8000ebc:	e7ee      	b.n	8000e9c <__libc_init_array+0xc>
 8000ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ec2:	4798      	blx	r3
 8000ec4:	3601      	adds	r6, #1
 8000ec6:	e7f2      	b.n	8000eae <__libc_init_array+0x1e>
 8000ec8:	08000f18 	.word	0x08000f18
 8000ecc:	08000f18 	.word	0x08000f18
 8000ed0:	08000f18 	.word	0x08000f18
 8000ed4:	08000f1c 	.word	0x08000f1c

08000ed8 <memset>:
 8000ed8:	4402      	add	r2, r0
 8000eda:	4603      	mov	r3, r0
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <memset+0xa>
 8000ee0:	4770      	bx	lr
 8000ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ee6:	e7f9      	b.n	8000edc <memset+0x4>

08000ee8 <_init>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	bf00      	nop
 8000eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eee:	bc08      	pop	{r3}
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	4770      	bx	lr

08000ef4 <_fini>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr
