
opdr_2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000140  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d8  080002e0  000102e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d8  080002d8  000102e0  2**0
                  CONTENTS
  4 .ARM          00000000  080002d8  080002d8  000102e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d8  080002e0  000102e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d8  080002d8  000102d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002dc  080002dc  000102dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002e0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000f5  00000000  00000000  00010310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000008b  00000000  00000000  00010405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00010490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  000104d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f82  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000432  00000000  00000000  0001148a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003cc4  00000000  00000000  000118bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00015580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000155d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080002c0 	.word	0x080002c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080002c0 	.word	0x080002c0

080001d8 <main>:
#define GPIOD_MODER *(volatile uint32_t*)(GPIOD_BASE + 0x00)
#define GPIOD_ODR *(volatile uint32_t*)(GPIOD_BASE + 0x14)
// There is something missing here ...

int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	// GPIO Port D Clock Enable
	RCC_AHB1ENR_BIT_GPIODEN = 1;
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <main+0x40>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	601a      	str	r2, [r3, #0]
	// GPIO Port D Pin 15 down to 12 Push/Pull Output
	GPIOD_MODER = 0x55000000;
 80001e4:	4b0d      	ldr	r3, [pc, #52]	; (800021c <main+0x44>)
 80001e6:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
 80001ea:	601a      	str	r2, [r3, #0]
	// Set green and red LEDs
	GPIOD_ODR = 0x5000;
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <main+0x48>)
 80001ee:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80001f2:	601a      	str	r2, [r3, #0]
	// Do forever:
	while (1)
	{
		// Wait a moment
		for (volatile int32_t i = 0; i < 1000000; i++);
 80001f4:	2300      	movs	r3, #0
 80001f6:	607b      	str	r3, [r7, #4]
 80001f8:	e002      	b.n	8000200 <main+0x28>
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	3301      	adds	r3, #1
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a08      	ldr	r2, [pc, #32]	; (8000224 <main+0x4c>)
 8000204:	4293      	cmp	r3, r2
 8000206:	ddf8      	ble.n	80001fa <main+0x22>
		// Flip all LEDs
		GPIOD_ODR ^= 0xF000;
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <main+0x48>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <main+0x48>)
 800020e:	f483 4370 	eor.w	r3, r3, #61440	; 0xf000
 8000212:	6013      	str	r3, [r2, #0]
		for (volatile int32_t i = 0; i < 1000000; i++);
 8000214:	e7ee      	b.n	80001f4 <main+0x1c>
 8000216:	bf00      	nop
 8000218:	4247060c 	.word	0x4247060c
 800021c:	40020c00 	.word	0x40020c00
 8000220:	40020c14 	.word	0x40020c14
 8000224:	000f423f 	.word	0x000f423f

08000228 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8000228:	f8df d030 	ldr.w	sp, [pc, #48]	; 800025c <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800022c:	480c      	ldr	r0, [pc, #48]	; (8000260 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800022e:	490d      	ldr	r1, [pc, #52]	; (8000264 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000230:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000234:	e002      	b.n	800023c <LoopCopyDataInit>

08000236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023a:	3304      	adds	r3, #4

0800023c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800023c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000240:	d3f9      	bcc.n	8000236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000244:	4c0a      	ldr	r4, [pc, #40]	; (8000270 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000248:	e001      	b.n	800024e <LoopFillZerobss>

0800024a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800024c:	3204      	adds	r2, #4

0800024e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000250:	d3fb      	bcc.n	800024a <FillZerobss>

/* Call the clock system intitialization function.*/
//  bl  SystemInit // BroJZ: not needed for minimal configuration
/* Call static constructors */
    bl __libc_init_array
 8000252:	f000 f811 	bl	8000278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000256:	f7ff ffbf 	bl	80001d8 <main>
  bx  lr    
 800025a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 800025c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000264:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000268:	080002e0 	.word	0x080002e0
  ldr r2, =_sbss
 800026c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000270:	2000001c 	.word	0x2000001c

08000274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000274:	e7fe      	b.n	8000274 <ADC_IRQHandler>
	...

08000278 <__libc_init_array>:
 8000278:	b570      	push	{r4, r5, r6, lr}
 800027a:	4d0d      	ldr	r5, [pc, #52]	; (80002b0 <__libc_init_array+0x38>)
 800027c:	4c0d      	ldr	r4, [pc, #52]	; (80002b4 <__libc_init_array+0x3c>)
 800027e:	1b64      	subs	r4, r4, r5
 8000280:	10a4      	asrs	r4, r4, #2
 8000282:	2600      	movs	r6, #0
 8000284:	42a6      	cmp	r6, r4
 8000286:	d109      	bne.n	800029c <__libc_init_array+0x24>
 8000288:	4d0b      	ldr	r5, [pc, #44]	; (80002b8 <__libc_init_array+0x40>)
 800028a:	4c0c      	ldr	r4, [pc, #48]	; (80002bc <__libc_init_array+0x44>)
 800028c:	f000 f818 	bl	80002c0 <_init>
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	10a4      	asrs	r4, r4, #2
 8000294:	2600      	movs	r6, #0
 8000296:	42a6      	cmp	r6, r4
 8000298:	d105      	bne.n	80002a6 <__libc_init_array+0x2e>
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a0:	4798      	blx	r3
 80002a2:	3601      	adds	r6, #1
 80002a4:	e7ee      	b.n	8000284 <__libc_init_array+0xc>
 80002a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002aa:	4798      	blx	r3
 80002ac:	3601      	adds	r6, #1
 80002ae:	e7f2      	b.n	8000296 <__libc_init_array+0x1e>
 80002b0:	080002d8 	.word	0x080002d8
 80002b4:	080002d8 	.word	0x080002d8
 80002b8:	080002d8 	.word	0x080002d8
 80002bc:	080002dc 	.word	0x080002dc

080002c0 <_init>:
 80002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c2:	bf00      	nop
 80002c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c6:	bc08      	pop	{r3}
 80002c8:	469e      	mov	lr, r3
 80002ca:	4770      	bx	lr

080002cc <_fini>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	bf00      	nop
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr
