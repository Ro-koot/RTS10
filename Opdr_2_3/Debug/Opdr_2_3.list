
Opdr_2_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000400  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000598  08000598  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000598  08000598  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000598  08000598  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000598  08000598  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000598  08000598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080005a4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005a4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003147  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000aba  00000000  00000000  0002317b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001141  00000000  00000000  00023c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00024d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003a8  00000000  00000000  00024ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fc1a  00000000  00000000  00025270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000289b  00000000  00000000  00034e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005bc20  00000000  00000000  00037725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00093345  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002a0  00000000  00000000  00093398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000580 	.word	0x08000580

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000580 	.word	0x08000580

080001d8 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80001d8:	4b1e      	ldr	r3, [pc, #120]	; (8000254 <SystemClock_Config+0x7c>)
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	f022 0207 	bic.w	r2, r2, #7
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b510      	push	{r4, lr}
 80001e2:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80001e4:	681a      	ldr	r2, [r3, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80001e6:	0751      	lsls	r1, r2, #29
 80001e8:	d1fc      	bne.n	80001e4 <SystemClock_Config+0xc>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80001ea:	4a1b      	ldr	r2, [pc, #108]	; (8000258 <SystemClock_Config+0x80>)
 80001ec:	6813      	ldr	r3, [r2, #0]
 80001ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80001f2:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80001f4:	4b19      	ldr	r3, [pc, #100]	; (800025c <SystemClock_Config+0x84>)
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80001fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000200:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	f042 0201 	orr.w	r2, r2, #1
 8000208:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800020a:	681a      	ldr	r2, [r3, #0]
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  LL_RCC_HSI_SetCalibTrimming(16);
  LL_RCC_HSI_Enable();

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800020c:	0792      	lsls	r2, r2, #30
 800020e:	d5fc      	bpl.n	800020a <SystemClock_Config+0x32>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000210:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000212:	4c12      	ldr	r4, [pc, #72]	; (800025c <SystemClock_Config+0x84>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000214:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000218:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800021a:	689a      	ldr	r2, [r3, #8]
 800021c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000220:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000222:	689a      	ldr	r2, [r3, #8]
 8000224:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000228:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800022a:	689a      	ldr	r2, [r3, #8]
 800022c:	f022 0203 	bic.w	r2, r2, #3
 8000230:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000232:	68a3      	ldr	r3, [r4, #8]
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000234:	f013 0f0c 	tst.w	r3, #12
 8000238:	d1fb      	bne.n	8000232 <SystemClock_Config+0x5a>
  {

  }
  LL_Init1msTick(16000000);
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <SystemClock_Config+0x88>)
 800023c:	f000 f961 	bl	8000502 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000240:	4807      	ldr	r0, [pc, #28]	; (8000260 <SystemClock_Config+0x88>)
 8000242:	f000 f96b 	bl	800051c <LL_SetSystemCoreClock>
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000246:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800024a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800024e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
}
 8000252:	bd10      	pop	{r4, pc}
 8000254:	40023c00 	.word	0x40023c00
 8000258:	40007000 	.word	0x40007000
 800025c:	40023800 	.word	0x40023800
 8000260:	00f42400 	.word	0x00f42400

08000264 <main>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000264:	4b34      	ldr	r3, [pc, #208]	; (8000338 <main+0xd4>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000266:	4935      	ldr	r1, [pc, #212]	; (800033c <main+0xd8>)
 8000268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800026a:	4c35      	ldr	r4, [pc, #212]	; (8000340 <main+0xdc>)
{
 800026c:	b500      	push	{lr}
 800026e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000272:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000276:	b08b      	sub	sp, #44	; 0x2c
 8000278:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800027c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800027e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000282:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000286:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800028a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800028e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000294:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <main+0xe0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000296:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800029a:	0412      	lsls	r2, r2, #16
 800029c:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 800029e:	4313      	orrs	r3, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80002a0:	60cb      	str	r3, [r1, #12]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a2:	68ca      	ldr	r2, [r1, #12]
 80002a4:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002a8:	f1c2 0007 	rsb	r0, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ac:	1d13      	adds	r3, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	2804      	cmp	r0, #4
 80002b0:	bf28      	it	cs
 80002b2:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b4:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ba:	fa03 f300 	lsl.w	r3, r3, r0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002be:	bf8c      	ite	hi
 80002c0:	3a03      	subhi	r2, #3
 80002c2:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c4:	43db      	mvns	r3, r3
 80002c6:	4093      	lsls	r3, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	011b      	lsls	r3, r3, #4
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
  SystemClock_Config();
 80002d0:	f7ff ff82 	bl	80001d8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d4:	2210      	movs	r2, #16
 80002d6:	2100      	movs	r1, #0
 80002d8:	a806      	add	r0, sp, #24
 80002da:	f000 f949 	bl	8000570 <memset>
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <main+0xd4>)
 80002e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002e2:	f042 0208 	orr.w	r2, r2, #8
 80002e6:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	f003 0308 	and.w	r3, r3, #8
 80002ee:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80002f0:	9b03      	ldr	r3, [sp, #12]
 80002f2:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 80002f6:	61a3      	str	r3, [r4, #24]
  /**/
  LL_GPIO_ResetOutputPin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin);

  /**/
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002f8:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80002fc:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002fe:	a904      	add	r1, sp, #16
 8000300:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000302:	e9cd 2304 	strd	r2, r3, [sp, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000306:	f000 f85e 	bl	80003c6 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800030a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
	  for (volatile int32_t i = 0; i < 100000; i++);
 800030e:	480e      	ldr	r0, [pc, #56]	; (8000348 <main+0xe4>)
 8000310:	61a3      	str	r3, [r4, #24]
 8000312:	2100      	movs	r1, #0
 8000314:	9104      	str	r1, [sp, #16]
 8000316:	9b04      	ldr	r3, [sp, #16]
 8000318:	4283      	cmp	r3, r0
 800031a:	dd09      	ble.n	8000330 <main+0xcc>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 800031c:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800031e:	041a      	lsls	r2, r3, #16
 8000320:	43db      	mvns	r3, r3
 8000322:	f002 42a0 	and.w	r2, r2, #1342177280	; 0x50000000
 8000326:	f403 43a0 	and.w	r3, r3, #20480	; 0x5000
 800032a:	4313      	orrs	r3, r2
 800032c:	61a3      	str	r3, [r4, #24]
}
 800032e:	e7f1      	b.n	8000314 <main+0xb0>
 8000330:	9b04      	ldr	r3, [sp, #16]
 8000332:	3301      	adds	r3, #1
 8000334:	9304      	str	r3, [sp, #16]
 8000336:	e7ee      	b.n	8000316 <main+0xb2>
 8000338:	40023800 	.word	0x40023800
 800033c:	e000ed00 	.word	0xe000ed00
 8000340:	40020c00 	.word	0x40020c00
 8000344:	05fa0300 	.word	0x05fa0300
 8000348:	0001869f 	.word	0x0001869f

0800034c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800034c:	e7fe      	b.n	800034c <NMI_Handler>

0800034e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <HardFault_Handler>

08000350 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler>

08000352 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <BusFault_Handler>

08000354 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <UsageFault_Handler>

08000356 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000356:	4770      	bx	lr

08000358 <DebugMon_Handler>:
 8000358:	4770      	bx	lr

0800035a <PendSV_Handler>:
 800035a:	4770      	bx	lr

0800035c <SysTick_Handler>:
 800035c:	4770      	bx	lr
	...

08000360 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000360:	4a03      	ldr	r2, [pc, #12]	; (8000370 <SystemInit+0x10>)
 8000362:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800036a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800036e:	4770      	bx	lr
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800037a:	490e      	ldr	r1, [pc, #56]	; (80003b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800037c:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000390:	4c0b      	ldr	r4, [pc, #44]	; (80003c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800039e:	f7ff ffdf 	bl	8000360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003a2:	f000 f8c1 	bl	8000528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003a6:	f7ff ff5d 	bl	8000264 <main>
  bx  lr    
 80003aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003b8:	080005a0 	.word	0x080005a0
  ldr r2, =_sbss
 80003bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003c0:	20000020 	.word	0x20000020

080003c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC_IRQHandler>

080003c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003ca:	4602      	mov	r2, r0
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003cc:	680d      	ldr	r5, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ce:	fa95 f4a5 	rbit	r4, r5
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003d2:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003d6:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003da:	2603      	movs	r6, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80003dc:	f04f 0c0f 	mov.w	ip, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003e0:	fa35 f004 	lsrs.w	r0, r5, r4
 80003e4:	d101      	bne.n	80003ea <LL_GPIO_Init+0x24>
    }
    pinpos++;
  }

  return (SUCCESS);
}
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003ea:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 80003ee:	402b      	ands	r3, r5
 80003f0:	d06d      	beq.n	80004ce <LL_GPIO_Init+0x108>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80003f2:	6848      	ldr	r0, [r1, #4]
 80003f4:	1e47      	subs	r7, r0, #1
 80003f6:	2f01      	cmp	r7, #1
 80003f8:	d81e      	bhi.n	8000438 <LL_GPIO_Init+0x72>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80003fa:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80003fe:	fa93 f7a3 	rbit	r7, r3
 8000402:	fab7 f787 	clz	r7, r7
 8000406:	fa93 f9a3 	rbit	r9, r3
 800040a:	007f      	lsls	r7, r7, #1
 800040c:	fa06 f707 	lsl.w	r7, r6, r7
 8000410:	ea28 0807 	bic.w	r8, r8, r7
 8000414:	fab9 f989 	clz	r9, r9
 8000418:	688f      	ldr	r7, [r1, #8]
 800041a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800041e:	fa07 f709 	lsl.w	r7, r7, r9
 8000422:	ea48 0707 	orr.w	r7, r8, r7
 8000426:	6097      	str	r7, [r2, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000428:	6857      	ldr	r7, [r2, #4]
 800042a:	ea27 0803 	bic.w	r8, r7, r3
 800042e:	68cf      	ldr	r7, [r1, #12]
 8000430:	435f      	muls	r7, r3
 8000432:	ea48 0707 	orr.w	r7, r8, r7
 8000436:	6057      	str	r7, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000438:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800043c:	fa93 f7a3 	rbit	r7, r3
 8000440:	fab7 f787 	clz	r7, r7
 8000444:	fa93 f9a3 	rbit	r9, r3
 8000448:	007f      	lsls	r7, r7, #1
 800044a:	fa06 f707 	lsl.w	r7, r6, r7
 800044e:	ea28 0807 	bic.w	r8, r8, r7
 8000452:	fab9 f989 	clz	r9, r9
 8000456:	690f      	ldr	r7, [r1, #16]
 8000458:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800045c:	fa07 f709 	lsl.w	r7, r7, r9
 8000460:	ea48 0707 	orr.w	r7, r8, r7
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000464:	2802      	cmp	r0, #2
 8000466:	60d7      	str	r7, [r2, #12]
 8000468:	d11d      	bne.n	80004a6 <LL_GPIO_Init+0xe0>
 800046a:	fa93 f7a3 	rbit	r7, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800046e:	fab7 f787 	clz	r7, r7
 8000472:	2f07      	cmp	r7, #7
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000474:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000478:	dc2b      	bgt.n	80004d2 <LL_GPIO_Init+0x10c>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800047a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800047e:	fa93 f8a3 	rbit	r8, r3
 8000482:	fab8 f888 	clz	r8, r8
 8000486:	fa93 f7a3 	rbit	r7, r3
 800048a:	fab7 f787 	clz	r7, r7
 800048e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8000492:	fa0c f808 	lsl.w	r8, ip, r8
 8000496:	00bf      	lsls	r7, r7, #2
 8000498:	ea2a 0808 	bic.w	r8, sl, r8
 800049c:	fa09 f707 	lsl.w	r7, r9, r7
 80004a0:	ea48 0707 	orr.w	r7, r8, r7
 80004a4:	6217      	str	r7, [r2, #32]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80004a6:	f8d2 8000 	ldr.w	r8, [r2]
 80004aa:	fa93 f7a3 	rbit	r7, r3
 80004ae:	fab7 f787 	clz	r7, r7
 80004b2:	fa93 f3a3 	rbit	r3, r3
 80004b6:	fab3 f383 	clz	r3, r3
 80004ba:	007f      	lsls	r7, r7, #1
 80004bc:	fa06 f707 	lsl.w	r7, r6, r7
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	ea28 0707 	bic.w	r7, r8, r7
 80004c6:	fa00 f303 	lsl.w	r3, r0, r3
 80004ca:	433b      	orrs	r3, r7
 80004cc:	6013      	str	r3, [r2, #0]
    pinpos++;
 80004ce:	3401      	adds	r4, #1
 80004d0:	e786      	b.n	80003e0 <LL_GPIO_Init+0x1a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80004d2:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
 80004d6:	0a1f      	lsrs	r7, r3, #8
 80004d8:	fa97 f8a7 	rbit	r8, r7
 80004dc:	fab8 f888 	clz	r8, r8
 80004e0:	fa97 f7a7 	rbit	r7, r7
 80004e4:	fab7 f787 	clz	r7, r7
 80004e8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80004ec:	fa0c f808 	lsl.w	r8, ip, r8
 80004f0:	00bf      	lsls	r7, r7, #2
 80004f2:	ea2a 0808 	bic.w	r8, sl, r8
 80004f6:	fa09 f707 	lsl.w	r7, r9, r7
 80004fa:	ea48 0707 	orr.w	r7, r8, r7
 80004fe:	6257      	str	r7, [r2, #36]	; 0x24
}
 8000500:	e7d1      	b.n	80004a6 <LL_GPIO_Init+0xe0>

08000502 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000506:	fbb0 f0f3 	udiv	r0, r0, r3
 800050a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800050e:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000510:	3801      	subs	r0, #1
 8000512:	6158      	str	r0, [r3, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000514:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000516:	2205      	movs	r2, #5
 8000518:	611a      	str	r2, [r3, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 800051a:	4770      	bx	lr

0800051c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <LL_SetSystemCoreClock+0x8>)
 800051e:	6018      	str	r0, [r3, #0]
}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000

08000528 <__libc_init_array>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	4d0d      	ldr	r5, [pc, #52]	; (8000560 <__libc_init_array+0x38>)
 800052c:	4c0d      	ldr	r4, [pc, #52]	; (8000564 <__libc_init_array+0x3c>)
 800052e:	1b64      	subs	r4, r4, r5
 8000530:	10a4      	asrs	r4, r4, #2
 8000532:	2600      	movs	r6, #0
 8000534:	42a6      	cmp	r6, r4
 8000536:	d109      	bne.n	800054c <__libc_init_array+0x24>
 8000538:	4d0b      	ldr	r5, [pc, #44]	; (8000568 <__libc_init_array+0x40>)
 800053a:	4c0c      	ldr	r4, [pc, #48]	; (800056c <__libc_init_array+0x44>)
 800053c:	f000 f820 	bl	8000580 <_init>
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	10a4      	asrs	r4, r4, #2
 8000544:	2600      	movs	r6, #0
 8000546:	42a6      	cmp	r6, r4
 8000548:	d105      	bne.n	8000556 <__libc_init_array+0x2e>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000550:	4798      	blx	r3
 8000552:	3601      	adds	r6, #1
 8000554:	e7ee      	b.n	8000534 <__libc_init_array+0xc>
 8000556:	f855 3b04 	ldr.w	r3, [r5], #4
 800055a:	4798      	blx	r3
 800055c:	3601      	adds	r6, #1
 800055e:	e7f2      	b.n	8000546 <__libc_init_array+0x1e>
 8000560:	08000598 	.word	0x08000598
 8000564:	08000598 	.word	0x08000598
 8000568:	08000598 	.word	0x08000598
 800056c:	0800059c 	.word	0x0800059c

08000570 <memset>:
 8000570:	4402      	add	r2, r0
 8000572:	4603      	mov	r3, r0
 8000574:	4293      	cmp	r3, r2
 8000576:	d100      	bne.n	800057a <memset+0xa>
 8000578:	4770      	bx	lr
 800057a:	f803 1b01 	strb.w	r1, [r3], #1
 800057e:	e7f9      	b.n	8000574 <memset+0x4>

08000580 <_init>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	bf00      	nop
 8000584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000586:	bc08      	pop	{r3}
 8000588:	469e      	mov	lr, r3
 800058a:	4770      	bx	lr

0800058c <_fini>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr
